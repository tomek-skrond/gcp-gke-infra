name: 'Terraform'

on:
  push:
    branches:
      - master
      - test
  workflow_dispatch:
    inputs:
      job:
        type: choice
        description: 'Select the job to run'
        required: true
        default: 'validate'
        options:
          - apply
          - destroy 
      
env:
  TF_VAR_cluster_name: ${{ vars.CLUSTER_NAME }} #Cluster name
  TF_VAR_network: ${{ vars.TF_VAR_NETWORK }}	#The VPC network to host the cluster in any n/a yes
  TF_VAR_subnetwork: ${{ vars.TF_VAR_SUBNETWORK }}	#The subnetwork to host the cluster in any n/a yes
  TF_VAR_region: ${{ vars.TF_VAR_REGION }} #Cluster region
  TF_VAR_ip_range_pods: ${{ vars.TF_VAR_IP_RANGE_PODS }} #The secondary ip range to use for pods any n/a yes
  TF_VAR_ip_range_services: ${{ vars.TF_VAR_IP_RANGE_SERVICES }} #The secondary ip range to use for services any n/a yes
  TF_VAR_cluster_static_ip: ${{ vars.TF_VAR_CLUSTER_STATIC_IP }} #Static IP name of cluster 
  BUCKET_NAME: ${{ vars.BUCKET_NAME }}

  TF_VAR_credential_file: ${{ secrets.TF_VAR_CREDENTIAL_FILE }} #JSON credentials for service account
  TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT }} #GCP Project ID
  TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }} #Cloudflare API Token
  TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }} #Cloudflare Zone id
  TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }} #Domain name
  TF_VAR_compute_engine_service_account: ${{ secrets.TF_VAR_COMPUTE_ENGINE_SERVICE_ACCOUNT }} #Service account to associate to the nodes in the cluster any n/a yes

permissions:
  contents: read
  
jobs:
  terraform_validate:
    name: 'validate'
    runs-on: ubuntu-latest
    # environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform validate
      run: |
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform fmt
        terraform validate
      
  terraform_apply:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'apply'
    name: 'apply'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform_validate
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform Apply
      run: |
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform apply -auto-approve -input=false -lock=false


  terraform_destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'destroy'
    name: 'destroy'
    runs-on: ubuntu-latest
    # environment: production
    needs: terraform_validate
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform Destroy
      run: |
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform destroy -auto-approve -input=false -lock=false

  trigger:
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - name: Trigger manifests workflow
        run: |
          # Set the required variables
          repo_owner="tomek-skrond"
          repo_name="recipe-app-manifests"  
          event_type="trigger-workflow" 
          service="recipe-app-manifests"
  
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$repo_owner/$repo_name/dispatches \
            -d "{\"event_type\": \"$event_type\", \"client_payload\": {\"service\": \"$service\", \"unit\": false, \"integration\": true}}"