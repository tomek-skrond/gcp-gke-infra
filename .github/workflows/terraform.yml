name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      terraform_operation:
        description: "Terraform operation: plan, apply, destroy"
        required: false
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
env:
  TF_WORKDIR: gke
  TF_VAR_credential_file: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
  TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT }}
  TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
  TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }}
  TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME }}
  TF_VAR_cluster_name_suffix: ${{ secrets.TF_VAR_CLUSTER_NAME_SUFFIX }}	#A suffix to append to the default cluster name	string	""	no
  TF_VAR_network: ${{ secrets.TF_VAR_NETWORK }}	#The VPC network to host the cluster in	any	n/a	yes
  TF_VAR_subnetwork: ${{ secrets.TF_VAR_SUBNETWORK }}	#The subnetwork to host the cluster in	any	n/a	yes
  TF_VAR_compute_engine_service_account: ${{ secrets.TF_VAR_COMPUTE_ENGINE_SERVICE_ACCOUNT }} #Service account to associate to the nodes in the cluster	any	n/a	yes
  TF_VAR_ip_range_pods: ${{ secrets.TF_VAR_IP_RANGE_PODS }}	#The secondary ip range to use for pods	any	n/a	yes
  TF_VAR_ip_range_services: ${{ secrets.TF_VAR_IP_RANGE_SERVICES }}	#The secondary ip range to use for services	any	n/a	yes
  BUCKET_NAME: ${{ secrets.BACKEND_BUCKET_NAME }}

permissions:
  contents: read
  
jobs:
  terraform_plan:
    if: ${{ github.event_name == 'push' || github.event.inputs.terraform_operation == 'plan' }}
    name: 'plan'
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform Plan
      run: |
        cd gke
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform plan -input=false
      # working-directory: ${{ env.TF_WORKDIR }}
      
  terraform_apply:
    # if: ${{ github.event_name == 'push' || github.event.inputs.terraform_operation == 'apply' }}
    if: ${{ github.event.inputs.terraform_operation == 'apply' }}
    name: 'apply'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform_plan
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform Apply
      run: |
        cd gke
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform apply -auto-approve -input=false
      # working-directory: ${{ env.TF_WORKDIR }}


  terraform_destroy:
    # if: ${{ github.event_name == 'push' || github.event.inputs.terraform_operation == 'destroy' }}
    if: ${{ github.event.inputs.terraform_operation == 'destroy' }}
    name: 'destroy'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform_plan
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.TF_VAR_CREDENTIAL_FILE }}
    - name: Terraform Destroy
      run: |
        cd gke
        terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
        terraform destroy -auto-approve -input=false
      # working-directory: ${{ env.TF_WORKDIR }}
